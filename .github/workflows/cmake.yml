name: CMake

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
      
    - name: Query git revision
      id: git_revision
      shell: bash
      run: |
        GITREV="`git show -s --format='%h'`"
        echo "::set-output name=revision::${GITREV}"
    
    - name: Set up cache
      uses: actions/cache@v2
      with:
        path: ~/.ccache
        key: ${{ runner.os }}-cache-${{ steps.git_revision.outputs.revision }}
        restore-keys: ${{ runner.os }}-cache-
    
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        sudo apt-get -y install ccache
        mkdir -p "$HOME/.ccache"
        cmake -B ${{github.workspace}}/build -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_TESTING=ON

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -VV -C ${{env.BUILD_TYPE}}      
